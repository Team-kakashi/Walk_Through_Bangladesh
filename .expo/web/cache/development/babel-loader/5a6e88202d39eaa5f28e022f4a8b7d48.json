{"ast":null,"code":"import React, { useState } from \"react\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport { ModalView, ModalContainer, Subtitle, InsideModal, ModalText, Line } from \"./common.style\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar OPTIONS;\nvar WIDTH = Dimensions.get(\"window\").width;\nvar HEIGHT = Dimensions.get(\"window\").height;\nexport var ModalPicker = function ModalPicker(props) {\n  console.log('hoise re', props.array);\n  OPTIONS = props.array;\n\n  var onPressItem = function onPressItem(option) {\n    props.changeModalVisibility(false);\n    props.setData(option);\n  };\n\n  var option = OPTIONS.map(function (item, index) {\n    return _jsxs(InsideModal, {\n      onPress: function onPress() {\n        return onPressItem(item);\n      },\n      children: [_jsx(ModalText, {\n        children: item\n      }), _jsx(Line, {})]\n    }, index);\n  });\n  return _jsx(ModalContainer, {\n    onPress: function onPress() {\n      return props.changeModalVisibility(false);\n    },\n    children: _jsx(ModalView, {\n      style: {\n        width: WIDTH - 32,\n        height: HEIGHT / 2\n      },\n      children: _jsx(ScrollView, {\n        children: option\n      })\n    })\n  });\n};","map":{"version":3,"sources":["E:/Development/Walk_Through_Bangladesh/src/components/modalPicker.js"],"names":["React","useState","ModalView","ModalContainer","Subtitle","InsideModal","ModalText","Line","OPTIONS","WIDTH","Dimensions","get","width","HEIGHT","height","ModalPicker","props","console","log","array","onPressItem","option","changeModalVisibility","setData","map","item","index"],"mappings":"AAEA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;;;;;;AAQA,SACEC,SADF,EAEEC,cAFF,EAGEC,QAHF,EAIEC,WAJF,EAKEC,SALF,EAMEC,IANF;;;AASA,IAAIC,OAAJ;AAEA,IAAMC,KAAK,GAAGC,UAAU,CAACC,GAAX,CAAe,QAAf,EAAyBC,KAAvC;AACA,IAAMC,MAAM,GAAGH,UAAU,CAACC,GAAX,CAAe,QAAf,EAAyBG,MAAxC;AAEA,OAAO,IAAMC,WAAW,GAAG,SAAdA,WAAc,CAACC,KAAD,EAAW;AAEpCC,EAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAuBF,KAAK,CAACG,KAA7B;AACAX,EAAAA,OAAO,GAACQ,KAAK,CAACG,KAAd;;AACA,MAAMC,WAAW,GAAG,SAAdA,WAAc,CAACC,MAAD,EAAY;AAC9BL,IAAAA,KAAK,CAACM,qBAAN,CAA4B,KAA5B;AACAN,IAAAA,KAAK,CAACO,OAAN,CAAcF,MAAd;AAGD,GALD;;AAMA,MAAMA,MAAM,GAAGb,OAAO,CAACgB,GAAR,CAAY,UAACC,IAAD,EAAOC,KAAP,EAAiB;AAC1C,WACE,MAAC,WAAD;AAEE,MAAA,OAAO,EAAE;AAAA,eAAMN,WAAW,CAACK,IAAD,CAAjB;AAAA,OAFX;AAAA,iBAIE,KAAC,SAAD;AAAA,kBAAYA;AAAZ,QAJF,EAKE,KAAC,IAAD,KALF;AAAA,OACOC,KADP,CADF;AASD,GAVc,CAAf;AAWA,SACE,KAAC,cAAD;AACE,IAAA,OAAO,EAAE;AAAA,aAAMV,KAAK,CAACM,qBAAN,CAA4B,KAA5B,CAAN;AAAA,KADX;AAAA,cAGE,KAAC,SAAD;AACE,MAAA,KAAK,EAAE;AAAEV,QAAAA,KAAK,EAAEH,KAAK,GAAG,EAAjB;AAAqBK,QAAAA,MAAM,EAAED,MAAM,GAAG;AAAtC,OADT;AAAA,gBAGE,KAAC,UAAD;AAAA,kBAAaQ;AAAb;AAHF;AAHF,IADF;AAWD,CAhCM","sourcesContent":["/** @format */\r\n\r\nimport React, { useState } from \"react\";\r\nimport {\r\n  ScrollView,\r\n  Text,\r\n  View,\r\n  Dimensions,\r\n  TouchableOpacity,\r\n} from \"react-native\";\r\nimport {\r\n  ModalView,\r\n  ModalContainer,\r\n  Subtitle,\r\n  InsideModal,\r\n  ModalText,\r\n  Line,\r\n} from \"./common.style\";\r\n\r\nvar OPTIONS;\r\n\r\nconst WIDTH = Dimensions.get(\"window\").width;\r\nconst HEIGHT = Dimensions.get(\"window\").height;\r\n\r\nexport const ModalPicker = (props) => {\r\n  //console.log(props);\r\n  console.log('hoise re',props.array)\r\n  OPTIONS=props.array\r\n  const onPressItem = (option) => {\r\n    props.changeModalVisibility(false);\r\n    props.setData(option);\r\n   // console.log('hoise',props.array)\r\n   //OPTIONS= props.array\r\n  };\r\n  const option = OPTIONS.map((item, index) => {\r\n    return (\r\n      <InsideModal\r\n        key={index}\r\n        onPress={() => onPressItem(item)}\r\n      >\r\n        <ModalText>{item}</ModalText>\r\n        <Line />\r\n      </InsideModal>\r\n    );\r\n  });\r\n  return (\r\n    <ModalContainer\r\n      onPress={() => props.changeModalVisibility(false)}\r\n    >\r\n      <ModalView\r\n        style={{ width: WIDTH - 32, height: HEIGHT / 2 }}\r\n      >\r\n        <ScrollView>{option}</ScrollView>\r\n      </ModalView>\r\n    </ModalContainer>\r\n  );\r\n};\r\n"]},"metadata":{},"sourceType":"module"}